import java.awt.BorderLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.sql.SQLException;
import java.util.regex.PatternSyntaxException;

import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.JTextArea;
import javax.swing.JTextField;
import javax.swing.RowFilter;
import javax.swing.ScrollPaneConstants;
import javax.swing.table.TableModel;
import javax.swing.table.TableRowSorter;

public class DisplayQueryResults extends JFrame {
	
	private static final String DATABASE_URL = "jdbc:mysql://localhost/books?serverTimezone=UTC";
	private static final String USERNAME = "java";
	private static final String PASSWORD = "java";
	
	private static final String DEFAULT_QUERY = "SELECT * FROM Authors";
	
	private static ResultSetTableModel tableModel;
	
	public static void main(String[] args) {
		try {
			tableModel = new ResultSetTableModel(DATABASE_URL, USERNAME, PASSWORD, DEFAULT_QUERY);
			
			final JTextArea queryArea = new JTextArea(DEFAULT_QUERY, 3, 100);
			queryArea.setWrapStyleWord(true);
			queryArea.setLineWrap(true);
			
			JScrollPane scrollPane = new JScrollPane(queryArea,
					ScrollPaneConstants.VERTICAL_SCROLLBAR_AS_NEEDED,
					ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
			
			JButton submitBtn = new JButton("Submit Query");
			
			Box boxNorth = Box.createHorizontalBox();
			boxNorth.add(scrollPane);
			boxNorth.add(submitBtn);
			
			JTable resultTable = new JTable(tableModel);
			JLabel filterLabel = new JLabel("Filter:");
			final JTextField filterText = new JTextField();
			JButton filterBtn = new JButton("Apply Filter");
			
			Box boxSouth = Box.createHorizontalBox();
			boxSouth.add(filterLabel);
			boxSouth.add(filterText);
			boxSouth.add(filterBtn);
			
			JFrame window = new JFrame("Displaying Query Results");
			
			add(boxNorth, BorderLayout.NORTH);
			add(new JScrollPane(resultTable), BorderLayout.CENTER);
			add(boxSouth, BorderLayout.SOUTH);
			
			submitBtn.addActionListener(new ActionListener() {
				public void actionPerformed(ActionEvent event) {
					try {
						tableModel.setQuery(queryArea.getText());
					}
					catch(SQLException sqlException) {
						JOptionPane.showMessageDialog(null,
								sqlException.getMessage(), "Database Error", JOptionPane.ERROR_MESSAGE);
						
						try {
							tableModel.setQuery(DEFAULT_QUERY);
							queryArea.setText(DEFAULT_QUERY);
						}
						catch(SQLException sqlException2){
							JOptionPane.showMessageDialog(null, sqlException2.getMessage(),
									"Database Error", JOptionPane.ERROR_MESSAGE);
							tableModel.disconnectFromDatabase();
							System.exit(1);
						}
					}
				}
			});
			
			final TableRowSorter<TableModel> sorter = new TableRowSorter<TableModel>(tableModel);
			resultTable.setRowSorter(sorter);
			
			filterBtn.addActionListener(new ActionListener() {
				public void actionPerformed(ActionEvent actionEvent) {
					String text = filterText.getText();
					if(text.length()==0) {
						sorter.setRowFilter(null);
					}
					else {
						try {
							sorter.setRowFilter(RowFilter.regexFilter(text));
						}
						catch(PatternSyntaxException pse) {
							JOptionPane.showMessageDialog(null, "Bad regex pattern",
									"Bad regex pattern", JOptionPane.ERROR_MESSAGE);
						}
					}
				}
			});
			
			window.setDefaultCloseOperation(DISPOSE_ON_CLOSE);
			window.setSize(500, 250);
			
		}
		catch(SQLException sqlException) {
			JOptionPane.showInternalMessageDialog(null, sqlException.getMessage(),
					"Database error", JOptionPane.ERROR_MESSAGE);
			tableModel.disconnectFromDatabase();
			System.exit(1);
		}
	}

}
